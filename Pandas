https://kanoki.org/  

https://www.dataquest.io/blog/regular-expressions-data-scientists/

if s_name is not None:
    sender_name = re.sub("s*<", "", re.sub(":s*", "", s_name.group()))
else:
    sender_name = None
We use the re module’s re.sub() function twice before assigning the string to a variable. 
First, we remove the colon and any whitespace characters between it and the name. 
We do this by substituting :s* with an empty string "". 
Then, we remove whitespace characters and the angle bracket on the other side of the name, again substituting it with an empty string. 
  
  
  
Pandas extract
Extract the first 5 characters of each country using ^(start of the String) and {5} (for 5 characters) 
and create a new column first_five_letter

df['first_five_Letter']=df['Country (region)'].str.extract(r'(^\w{5})')
df.head()


Pandas Count
First we are counting the countries starting with character ‘F’. It returns two elements but not france 
because the character ‘f’ here is in lower case. you can add both Upper and Lower case by using [Ff]

S=pd.Series(['Finland','Colombia','Florida','Japan','Puerto Rico','Russia','france'])
S[S.str.count(r'(^F.*)')==1]
S.str.count(r'(^F.*)').sum()

In our Original dataframe we are finding all the Country that starts with Character ‘P’ and ‘p’ (both lower and upper case). 
Basically we are filtering all the rows which return count > 0.
df[df['Country (region)'].str.count('^[pP].*')>0]

Pandas Match
match () function is equivalent to python’s re.match() and returns a boolean value. 
We are finding all the countries in pandas series starting with character ‘P’ (Upper case) .

# Get countries starting with letter P
S=pd.Series(['Finland','Colombia','Florida','Japan','Puerto Rico','Russia','france'])
S[S.str.match(r'(^P.*)')==True]

Pandas Replace
Replaces all the occurence of matched pattern in the string. 
We want to remove the dash(-) followed by number in the below pandas series object. 
The regex checks for a dash(-) followed by a numeric digit (represented by \d) and replace that with an empty string 
and the inplace parameter set as True will update the existing series. 
The output is list of countres without the dash and number.

# Remove the dash(-) followed by number from all countries in the Series
S=pd.Series(['Finland-1','Colombia-2','Florida-3','Japan-4','Puerto Rico-5','Russia-6','france-7'])
S.replace('(-\d)','',regex=True, inplace = True)

Pandas Findall
It calls re.findall() and find all occurence of matching patterns. 
We are creating a new list of countries which starts with character ‘F’ and ‘f’ from the Series. 
The list comprehension checks for all the returned value > 0 and creates a list matching the patterns.

S=pd.Series(['Finland','Colombia','Florida','Japan','Puerto Rico','Russia','france'])
[itm[0] for itm in S.str.findall('^[Ff].*') if len(itm)>0]


Pandas Contains
It uses re.search() and returns a boolean value. In the below regex we are looking for all the countries 
starting with character ‘F’ (using start with metacharacter ^) in the pandas series object. 
The result shows True for all countries start with character ‘F’ and False which doesn’t.

S=pd.Series(['Finland','Colombia','Florida','Japan','Puerto Rico','Russia','france'])
S.str.contains('^F.*')

In our original dataframe we will filter all the countries starting with character ‘I’ . 
We just need to filter all the True values that is returned by contains() function.

df[df['Country (region)'].str.contains('^I.*')==True]


Pandas Split
This is equivalent to str.split() and accepts regex, if no regex passed then the default is \s (for whitespace). 
Here we are splitting the text on white space and expands set as True splits that into 3 different columns
You can also specify the param n to Limit number of splits in output

s = pd.Series(["StatueofLiberty built-on 28-Oct-1886"])
s.str.split(r"\s", n=-1,expand=True)


